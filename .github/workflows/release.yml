name: Release

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  test_ci:
    name: Run Test CI
    uses: ./.github/workflows/test.yml

  release:
    needs: test_ci
    runs-on: ubuntu-latest
    timeout-minutes: 5
    if: github.repository == 'inialum/inialum-error-notification-service'
    permissions:
      contents: write
      id-token: write
      pull-requests: write

    steps:
      - uses: actions/create-github-app-token@v1
        id: app-token
        with:
          app-id: ${{ vars.INIALUM_AUTOMATION_APP_ID }}
          private-key: ${{ secrets.INIALUM_AUTOMATION_PRIVATE_KEY }}

      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ steps.app-token.outputs.token }}
          ref: ${{ github.head_ref }}
          persist-credentials: false

      - name: Get GitHub App User ID
        id: get-user-id
        run: echo "user-id=$(gh api "/users/${{ steps.app-token.outputs.app-slug }}[bot]" --jq .id)" >> "$GITHUB_OUTPUT"
        env:
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}

      - name: Configure Git
        run: |
          git config user.name '${{ steps.app-token.outputs.app-slug }}[bot]'
          git config user.email '${{ steps.get-user-id.outputs.user-id }}+${{ steps.app-token.outputs.app-slug }}[bot]@users.noreply.github.com>'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Create Release Pull Request or Publish to npm
        id: changesets
        uses: changesets/action@v1
        with:
          version: "pnpm changeset version && pnpm format"
          setupGitUser: false
        env:
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}

      - name: Publish package to npm
        if: steps.changesets.outputs.hasChangesets == 'false'
        run: pnpm publish:ci --provenance --dry-run
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NODE_AUTH_TOKEN }}
